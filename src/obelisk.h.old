#ifndef OBELISK_API_H
#define OBELISK_API_H


#include <obelisk_string.h>


typedef struct build_option {
    void *p;
    unsigned int n;
} BuildOption;

typedef struct build_exe_option {
    void *p;
    unsigned int n;
} BuildExeOption;

typedef enum build_command_type {
    exec,
} BuildCommand;


typedef enum
build_target {
    os_linux,
    os_bsd,
    os_unix,
    os_windows,
} BuildTarget;

typedef enum
build_exe_set_flag {
    src,
    src_root,
    src_dep,
    obj,
    obj_shared,
    obj_archive,
} BuildExeFlag;


typedef struct build Build;
typedef struct build_step BuildStep;


//typedef struct build_exe BuildExe;

struct build {
    struct build_exe {
        StringSlice root_path;
        StringSlice src_paths;
        StringSlice *obj_paths;
        StringSlice output_path;
        BuildTarget target;
    } exe;
    
};

typedef enum build_error {
    BLD_ok        = 0,

    BLD_good      = 1,

    BLD_bad_input = 255,
} BuildError;


/* Adds a build context into a BuildExe */
//void
//build_add(Build *b, BuildExe *be);
//
///* Adds items to a BuildExe */
//void
//build_exe_add(BuildExe *be, BuildExeFlag flag);
//
///*  */
//void
//build_exe_set(BuildExe *be, BuildExeFlag flag);
//
///*  */
//void
//build_exe_(BuildExe *be, const char *path);
//
///*  */
//void
//build_compile(BuildExe *be);
//
///*  */
//void
//build_command_add(Build *b, BuildStep *bs, char * command,
//        char * description);
//
///*  */
//void
//build_command_register(BuildStep *bs, BuildExe *be, BuildCommand cmd);


#endif

/*
void
build(Build *b)
{
    BuildExe exe;
    BuildStep step;

    build_add(b, exe);

    build_exe_add(exe, BLD_src_root,    { .p = "src/main.c" });
    build_exe_add(exe, BLD_src_dep,     { .p = "src/obelisk.c" });
    build_exe_set(exe, BLD_target,      { .u = BLD_oslinux });
    build_exe_set(exe, BLD_mode,        { .u = BLD_debug });
}
*/

